#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

# script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
home_dir=$HOME

usage() {
  cat <<USAGE
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f path] -s subscription -g resource_group -c cluster_name

Setup a kubectl context for a given AKS cluster.

Available options:

-h, --help             Print this help and exit
-v, --verbose          Print script debug info
-f, --config-path      Path of kube config, default: \$HOME/.kube
-s, --subscription     Subscription name
-g, --resource-group   Name of resource group
-c, --cluster-name     The cluster name
USAGE
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # nothing to cleanup so far
}

setup_colors() {
  if [[ -t 2 ]] && [[ "${TERM-}" != "dumb" ]]; then
    # shellcheck disable=SC2034
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    # shellcheck disable=SC2034
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

cygwin_transcode_workdir() {
  if [[ "${home_dir}" == "/cygdrive/*" ]]; then
    home_dir="$(cygpath -w ~)"
    home_dir="${home_dir//\\//}"
  fi
}

parse_params() {
  cygwin_transcode_workdir
  config_path="${home_dir}/.kube"

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    -f | --config-path)
      config_path="${2-}"
      shift
      ;;
    -s | --subscription)
      subscription="${2-}"
      shift
      ;;
    -g | --resource-group)
      resource_group="${2-}"
      shift
      ;;
    -c | --cluster-name)
      cluster_name="${2-}"
      shift
      ;;
    -?*) die "${RED}Unknown option: $1${NOFORMAT}" ;;
    *) break ;;
    esac
    shift
  done

  [[ -z "${subscription-}" ]] && die "${RED}Missing required parameter: --subscription${NOFORMAT}"
  [[ -z "${resource_group-}" ]] && die "${RED}Missing required parameter: --resource-group${NOFORMAT}"
  [[ -z "${cluster_name-}" ]] && die "${RED}Missing required parameter: --cluster-name${NOFORMAT}"

  return 0
}

create_kubeconfig() {
  rm -fr "${config_path:?}/${1-null}" # Enforce security by avoid command like 'rm -fr /'
  az aks get-credentials \
    -g "${resource_group}" \
    -n "${cluster_name}" \
    --subscription "${subscription}" \
    --file "${config_path:?}/$1"
  az aks get-credentials \
    -g "${resource_group}" \
    -n "${cluster_name}" \
    --subscription "${subscription}" \
    --overwrite-existing
}

set_as_current_context() {
  kubectl --kubeconfig="${config_path}/$1" get pods -A
  kubectl config use-context "${cluster_name}"
  kubectl get pods -A
}

main() {
  [[ $# -eq 0 ]] && usage

  setup_colors
  parse_params "$@"

  create_kubeconfig "config-${cluster_name}"
  set_as_current_context "config-${cluster_name}"
}

main "$@"
